// Code generated by mockery v2.42.1. DO NOT EDIT.

package domain

import (
	context "context"

	domain "github.com/BenjaminB64/fullstack-test/back/common/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockJobService is an autogenerated mock type for the JobService type
type MockJobService struct {
	mock.Mock
}

type MockJobService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobService) EXPECT() *MockJobService_Expecter {
	return &MockJobService_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function with given fields: ctx, name, taskType
func (_m *MockJobService) CreateJob(ctx context.Context, name string, taskType domain.JobTaskType) (*domain.Job, error) {
	ret := _m.Called(ctx, name, taskType)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.JobTaskType) (*domain.Job, error)); ok {
		return rf(ctx, name, taskType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.JobTaskType) *domain.Job); ok {
		r0 = rf(ctx, name, taskType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.JobTaskType) error); ok {
		r1 = rf(ctx, name, taskType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobService_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockJobService_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - taskType domain.JobTaskType
func (_e *MockJobService_Expecter) CreateJob(ctx interface{}, name interface{}, taskType interface{}) *MockJobService_CreateJob_Call {
	return &MockJobService_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, name, taskType)}
}

func (_c *MockJobService_CreateJob_Call) Run(run func(ctx context.Context, name string, taskType domain.JobTaskType)) *MockJobService_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.JobTaskType))
	})
	return _c
}

func (_c *MockJobService_CreateJob_Call) Return(_a0 *domain.Job, _a1 error) *MockJobService_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobService_CreateJob_Call) RunAndReturn(run func(context.Context, string, domain.JobTaskType) (*domain.Job, error)) *MockJobService_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function with given fields: ctx, id
func (_m *MockJobService) DeleteJob(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobService_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockJobService_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockJobService_Expecter) DeleteJob(ctx interface{}, id interface{}) *MockJobService_DeleteJob_Call {
	return &MockJobService_DeleteJob_Call{Call: _e.mock.On("DeleteJob", ctx, id)}
}

func (_c *MockJobService_DeleteJob_Call) Run(run func(ctx context.Context, id int)) *MockJobService_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockJobService_DeleteJob_Call) Return(_a0 error) *MockJobService_DeleteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobService_DeleteJob_Call) RunAndReturn(run func(context.Context, int) error) *MockJobService_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobToProcess provides a mock function with given fields: ctx
func (_m *MockJobService) GetJobToProcess(ctx context.Context) ([]*domain.Job, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetJobToProcess")
	}

	var r0 []*domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobService_GetJobToProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobToProcess'
type MockJobService_GetJobToProcess_Call struct {
	*mock.Call
}

// GetJobToProcess is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJobService_Expecter) GetJobToProcess(ctx interface{}) *MockJobService_GetJobToProcess_Call {
	return &MockJobService_GetJobToProcess_Call{Call: _e.mock.On("GetJobToProcess", ctx)}
}

func (_c *MockJobService_GetJobToProcess_Call) Run(run func(ctx context.Context)) *MockJobService_GetJobToProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockJobService_GetJobToProcess_Call) Return(_a0 []*domain.Job, _a1 error) *MockJobService_GetJobToProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobService_GetJobToProcess_Call) RunAndReturn(run func(context.Context) ([]*domain.Job, error)) *MockJobService_GetJobToProcess_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function with given fields: ctx
func (_m *MockJobService) ListJobs(ctx context.Context) ([]*domain.Job, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 []*domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobService_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type MockJobService_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJobService_Expecter) ListJobs(ctx interface{}) *MockJobService_ListJobs_Call {
	return &MockJobService_ListJobs_Call{Call: _e.mock.On("ListJobs", ctx)}
}

func (_c *MockJobService_ListJobs_Call) Run(run func(ctx context.Context)) *MockJobService_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockJobService_ListJobs_Call) Return(_a0 []*domain.Job, _a1 error) *MockJobService_ListJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobService_ListJobs_Call) RunAndReturn(run func(context.Context) ([]*domain.Job, error)) *MockJobService_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ReadJob provides a mock function with given fields: ctx, id
func (_m *MockJobService) ReadJob(ctx context.Context, id int) (*domain.Job, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReadJob")
	}

	var r0 *domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Job, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Job); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobService_ReadJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadJob'
type MockJobService_ReadJob_Call struct {
	*mock.Call
}

// ReadJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockJobService_Expecter) ReadJob(ctx interface{}, id interface{}) *MockJobService_ReadJob_Call {
	return &MockJobService_ReadJob_Call{Call: _e.mock.On("ReadJob", ctx, id)}
}

func (_c *MockJobService_ReadJob_Call) Run(run func(ctx context.Context, id int)) *MockJobService_ReadJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockJobService_ReadJob_Call) Return(_a0 *domain.Job, _a1 error) *MockJobService_ReadJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobService_ReadJob_Call) RunAndReturn(run func(context.Context, int) (*domain.Job, error)) *MockJobService_ReadJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function with given fields: ctx, job
func (_m *MockJobService) UpdateJob(ctx context.Context, job *domain.Job) (*domain.Job, error) {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Job) (*domain.Job, error)); ok {
		return rf(ctx, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Job) *domain.Job); ok {
		r0 = rf(ctx, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobService_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockJobService_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - job *domain.Job
func (_e *MockJobService_Expecter) UpdateJob(ctx interface{}, job interface{}) *MockJobService_UpdateJob_Call {
	return &MockJobService_UpdateJob_Call{Call: _e.mock.On("UpdateJob", ctx, job)}
}

func (_c *MockJobService_UpdateJob_Call) Run(run func(ctx context.Context, job *domain.Job)) *MockJobService_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Job))
	})
	return _c
}

func (_c *MockJobService_UpdateJob_Call) Return(_a0 *domain.Job, _a1 error) *MockJobService_UpdateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobService_UpdateJob_Call) RunAndReturn(run func(context.Context, *domain.Job) (*domain.Job, error)) *MockJobService_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobService creates a new instance of MockJobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobService {
	mock := &MockJobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
